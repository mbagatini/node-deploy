# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a job called "build" and another called "deploy"
  build:
    name: CI Pipeline
    # The type of runner that the job will run on DOcker
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it. Get the code
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run script Hello build!
        run: echo Hello, I am going to build!
      
      # Setar o ambiente Node.js
      - name: Setup Node.js environment
        uses: actions/setup-node@v1.4.3
        with:
          # Version Spec of the version to use.  Examples: 10.x, 10.15.1, >=10.15.0
          node-version: 12.x
          
      # Instala as depenencias do projeto
      - name: Instalando as depenencias do projeto
        run: yarn
         
      # Executa o build
      - name: Executa o build
        run: yarn build    
        
      # Gera um pacote com os arquivos
      - uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: |
            ${{ github.workspace }}
            !${{ github.workspace }}/node_modules
        
  deploy:
    name: CD Pipeline
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Download do pacote
      - name: Download do artifact
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
          
      - name: Display structure of downloaded files
        run: ls
        
      # Copiar o código após o build para a AWS
      - name: Copiando o código após o build para a AWS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}          
          key: ${{ secrets.SSH_KEY }}
          source: "."
          target: "~/app/node-deploy"
          rm: true
          
      # Acessar o server, instalar as dependências e restartar o serviço
      - name: Restartando a aplicação
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}          
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/app/node-deploy
            echo Instalando dependencias
            yarn
            echo Restartando o serviço
            pm2 restart node-deploy
        
